#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void linkedlisttraverse(struct Node* ptr) {
    while(ptr != NULL) {
        printf("%d\n", ptr->data);
        ptr = ptr->next;
    }
}

struct Node* deleteNodeAtPosition(struct Node* head, int pos) {
    if(head == NULL) {
        return head; // empty list, nothing to delete
    }
    
    // Delete the head node
    if(pos == 0) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
        return head;
    }
    
    struct Node* current = head;
    // Traverse to the node immediately before the position to delete
    for (int i = 0; current != NULL && i < pos - 1; i++) {
        current = current->next;
    }
    
    // Check if position is out of range
    if(current == NULL || current->next == NULL) {
        return head;
    }
    
    struct Node* nodeToDelete = current->next;
    current->next = nodeToDelete->next;
    free(nodeToDelete);
    
    return head;
}

int main() {
    // Create nodes
    struct Node* head = (struct Node*)malloc(sizeof(struct Node));
    struct Node* second = (struct Node*)malloc(sizeof(struct Node));
    struct Node* third = (struct Node*)malloc(sizeof(struct Node));
    struct Node* fourth = (struct Node*)malloc(sizeof(struct Node));
    struct Node* fifth = (struct Node*)malloc(sizeof(struct Node));
    struct Node* sixth = (struct Node*)malloc(sizeof(struct Node));

    // Link nodes
    head->data = 1;
    head->next = second;
    
    second->data = 2;
    second->next = third;
    
    third->data = 3;
    third->next = fourth;
    
    fourth->data = 4;
    fourth->next = fifth;
    
    fifth->data = 5;
    fifth->next = sixth;
    
    sixth->data = 6;
    sixth->next = NULL;
    
    printf("Original list:\n");
    linkedlisttraverse(head);
    
    // Remove the node at position 3 (0-indexed)
    int pos = 3;
    head = deleteNodeAtPosition(head, pos);
    
    printf("\nList after deleting element at position %d:\n", pos);
    linkedlisttraverse(head);
    
    return 0;
}
