#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void linkedlisttraverse(struct Node* ptr) {
    while (ptr != NULL) {
        printf("%d\n", ptr->data);
        ptr = ptr->next;
    }
}

struct Node* reverseLinkedList(struct Node* head) {
    struct Node *prev = NULL, *curr = head, *next = NULL;
    while (curr != NULL) {
        next = curr->next; // Store the next node
        curr->next = prev; // Reverse the current node's pointer
        prev = curr;       // Move 'prev' one step forward
        curr = next;       // Move 'curr' one step forward
    }
    return prev; // 'prev' becomes the new head of the reversed list
}

int main() {
    // Create nodes
    struct Node* head = (struct Node*)malloc(sizeof(struct Node));
    struct Node* second = (struct Node*)malloc(sizeof(struct Node));
    struct Node* third = (struct Node*)malloc(sizeof(struct Node));
    struct Node* fourth = (struct Node*)malloc(sizeof(struct Node));
    struct Node* fifth = (struct Node*)malloc(sizeof(struct Node));

    // Link nodes
    head->data = 1;
    head->next = second;

    second->data = 2;
    second->next = third;

    third->data = 3;
    third->next = fourth;

    fourth->data = 4;
    fourth->next = fifth;

    fifth->data = 5;
    fifth->next = NULL;

    // Print original list
    printf("Original list:\n");
    linkedlisttraverse(head);

    // Reverse the list
    head = reverseLinkedList(head);

    // Print reversed list
    printf("\nReversed list:\n");
    linkedlisttraverse(head);

    return 0;
}
